#include "/Engine/Public/Platform.ush"
//#include "ComputeShader/Public/ExampleComputeShader/ExampleComputeShader.h"

struct FShaderBoid
{
    float3 location;
    float padding;
    float3 forward;
    float padding2;
};

struct FShaderBoidResult
{
    float3 CA;
    float3 VM;
    float3 FC;
    int neighbours;
};

#define radius 500
#define avoidRadius 100

int NumberBoids;
StructuredBuffer<FShaderBoid> InputBoids;
RWStructuredBuffer<FShaderBoidResult> OutputBoids;

[numthreads(256, 1, 1)]
void ExampleComputeShader(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex)
{
    if (DispatchThreadId.x >= NumberBoids)
    {
        return;
    }
    
    float radiusSqr = pow(radius, 2);
    float avoidRadiusSqr = pow(avoidRadius, 2);
    float3 CA = float3(0, 0, 0);
    float3 FC = float3(0, 0, 0);
    float3 VM = float3(0, 0, 0);
    int neighbours = 0;
    for (int j = 0; j < NumberBoids; j++)
    {
        
        if (DispatchThreadId.x == j)
        {
            continue;
        }
        
        float3 distanceVector = InputBoids[j].location - InputBoids[DispatchThreadId.x].location;
        float distance = length(distanceVector);
        
        if (distance > radius)
        {
            continue;
        }
            
        neighbours++;
        
        if (distance < avoidRadius)
        {
            float distanceSqr = distanceVector.x * distanceVector.x + distanceVector.y * distanceVector.y + distanceVector.z * distanceVector.z;
            CA -= distanceVector / distanceSqr;
        }
            
        VM += InputBoids[j].forward;
            
        FC += InputBoids[j].location;
        
    }
    
    OutputBoids[DispatchThreadId.x].CA = CA;
    OutputBoids[DispatchThreadId.x].FC = FC;
    OutputBoids[DispatchThreadId.x].VM = VM;
    OutputBoids[DispatchThreadId.x].neighbours = neighbours;
    
    //OutputBoids[DispatchThreadId.x].CA = float3(413, 413, 413);
    //OutputBoids[DispatchThreadId.x].FC = float3(413, 413, 413);
    //OutputBoids[DispatchThreadId.x].VM = float3(413, 413, 413);
    //OutputBoids[DispatchThreadId.x].neighbours = 413;
    
    //OutputBoids[DispatchThreadId.x].CA = InputBoids[1999].location;
    //OutputBoids[DispatchThreadId.x].FC = InputBoids[1999].forward;
    //OutputBoids[DispatchThreadId.x].VM = VM;
    //OutputBoids[DispatchThreadId.x].neighbours = NumberBoids;

}